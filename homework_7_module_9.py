# Домашнее задание по теме "Декораторы"
# Задание: Декораторы в Python
#
# Цель задания:
# Освоить механизмы создания декораторов Python.
# Практически применить знания, создав функцию декоратор и обернув ею другую функцию.
#
# Задание:
# Напишите 2 функции:
# Функция, которая складывает 3 числа (sum_three)
# Функция декоратор (is_prime), которая распечатывает "Простое", если результат 1ой функции будет простым числом и
# "Составное" в противном случае.

# Пример:
# result = sum_three(2, 3, 6)
# print(result)
#
# Результат консоли:
# Простое
# 11
#
# Примечания:
# Не забудьте написать внутреннюю функцию wrapper в is_prime
# Функция is_prime должна возвращать wrapper
# @is_prime - декоратор для функции sum_three





# тема "Декораторы"

def is_prime(sum_three):  # ОБЯЗАТЕЛЬНО ПЕРЕДАТЬ КАК АРГУМЕНТ ФУНКЦИЮ (sum_three), К КОТОРОЙ ПРИМЕНЯЕМ ДАННУЮ ФУНКЦИЮ-ДЕКОРАТОР (def is_prime)
    def wrapper(*args):         # фУНКЦИЯ- РАЗВЕРТКА (wrapper), КОТОРАЯ РАЗВОРАЧИВАЕТ ФУНКЦИЮ  sum_three() (т.е. дополняет ее функционал!),
                                # К КОТОРОЙ ПРИМЕНЯЕМ ДЕКОРАТОР  is_prime()

        x = sum_three(*args)    # ЕСЛИ ФУНКЦИЯ (sum_three) К КОТОРОЙ ПРИМЕНЯЕМ ДЕКОРАТОР ИМЕЕТ АРГУМЕНТЫ, ТО ОБЯЗАТЕЛЬНО ПРОПИСЫВАМ (*args, *kwargs)


        for i in range(2, (x//2)+1):                    #   ЗДЕСЬ МОЖЕМ ПИСАТЬ ВСЕ, ЧТО ХОТИМ
            if x % i == 0:                              #   ЧЕМ ХОТИМ ДОПОЛНИТЬ ФУНКЦИЮ  sum_three
                print('Число ', x, ' - составное')      #   ИЛИ КАК ХОТИМ ЕЕ ОБРАБОТАТЬ
                break                                   #   ИЛИ ПРОВЕРИТЬ ЕЕ РАБОТОСПОСОБНОСТЬ, ВЫВОДЯ ПРИНТЫ
        else:                                           #   ЛИБО КОД, КАК ЗДЕСЬ В ЭТОМ ПРИМЕРЕ
                print('Число ', x, ' - простое')        #  --------   ЭТО   "ТЕЛО"   ДЕКОРАТОРА   --------


    return wrapper  # ОБЯЗАТЕЛЬНО ВОЗВРАЩАЕМ ФУНКЦИЮ РАЗВЕРТКИ (как показано здесь!)  ЭТО ДЕЛАТЬ ВСЕГДА   !!!

@is_prime
def sum_three(a, b, c):
    return a + b + c

sum_three(3, 6, 6)