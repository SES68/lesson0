# 2023/07|Домашнее задание по теме "Сложные моменты и исключения в стеке вызовов функции".
# Цель: понять как работают исключения внутри функций и как обрабатываются эти исключения на практике при помощи try-except.
#
# Задача "План перехват":
# Напишите 2 функции:



# 1. ===================================================================================================================
# Функция personal_sum(numbers):
# Должна принимать коллекцию numbers.
# Подсчитывать сумму чисел в numbers путём перебора и увеличивать переменную result.
# Если же при переборе встречается данное типа отличного от числового, то обработать исключение TypeError, увеличив счётчик incorrect_data на 1.
# В конечном итоге функция возвращает кортеж из двух значений: result - сумма чисел, incorrect_data - кол-во некорректных данных.

#
# def personal_sum(numbers):
#     incorrect_data = 0
#     result = 0
#     for i in range(len(numbers)):
#         try:
#             result += (numbers[i])
#         except TypeError:
#             incorrect_data += 1
#     return (result, incorrect_data)
#
# numbers = [ "***", 1, 2, '3', 4, "5 6", -10, "строка", 100, "двести", 0.56789 ]
#
# print(personal_sum(numbers))
# ======================================================================================================================





# 2. ===================================================================================================================

# Функция calculate_average(numbers)
# Среднее арифметическое - сумма всех данных делённая на их количество.
# Должна принимать коллекцию numbers и возвращать: среднее арифметическое всех чисел.
# Внутри для подсчёта суммы используйте функцию personal_sum написанную ранее.

# Т.к. коллекция numbers может оказаться пустой, то обработайте исключение ZeroDivisionError при делении на 0 и верните 0.
# Также в numbers может быть записана не коллекция, а другие типы данных, например числа.
# Обработайте исключение TypeError выводя строку 'В numbers записан некорректный тип данных'.
# В таком случае функция просто вернёт None.
#
# Пункты задачи:
# Создайте функцию personal_sum на основе условий задачи.
# Создайте функцию calculate_average на основе условий задачи.
# Вызовите функцию calculate_average несколько раз, передав в неё данные разных вариаций.


def personal_sum(numbers):
    incorrect_data = 0
    result = 0
    for i in range(len(numbers)):
        try:
            result += (numbers[i])
        except TypeError as exc:
            incorrect_data += 1
            print(f'В numbers записан некорректный тип данных {exc}')

    return result, incorrect_data


def calculate_average(numbers):
    try:

        summa, incorrect_data = personal_sum(numbers)
        medium_sum = summa / (len(numbers) - incorrect_data)

    except TypeError:
        print(f'Некорректный тип данных для подсчёта суммы')
        return None
    except ZeroDivisionError:
        print('Передана не коллекция')
        return 0

    return medium_sum

numbers = []
# numbers = (567)
# numbers = [ "***", 1, 2, '3', 4, "5 6", -10, "строка", 100, "двести", 0.56789 ]
# numbers = ("1, 2, 3")
# numbers = [1, "Строка", 3, "Ещё Строка"]
# numbers = [42, 15, 36, 13]


print(calculate_average(numbers))


