

# ДОПОЛНИТЕЛЬНЫЕ ЗАДАНИЯ К МОДУЛЮ 2     (ТЕЛЕГРАММ.  Преп.Александра)


# ЗАДАНИЕ 1.   ============================================================================

# Вводится число с клавиатуры N.
# Необходимо вывести квадраты всех четных чисел в промежутке от 1 до N включительно.

N = int(input('Введите любое целое число: '))

for index in range(N):
  if ((index+1)%2) == 0:
    print((index+1), " : ", (index+1)**2)

# Результат работы кода:

# Введите любое целое число: 9
# 2  :  4
# 4  :  16
# 6  :  36
# 8  :  64
# ==================================================================================================





# ЗАДАНИЕ 2.   ============================================================================


# Дан несортированный список, заполненный случайными положительными числами,
# Выводить корни тех элементов, которые меньше заданного числа.
#
# Список можно заполнить самим, рандомно или взять из примера ниже:
#
# Список на 200 элементов:
#    [9567, 9661, 6541, 4146, 534, 5627, 6900, 5803, 7794, 1174, 2365, 9759, 355, 2071, 5053, 1252, 4063, 3068, 9552, 9895, 5642, 3286, 5740, 9318, 1684, 8758, 9520, 9420, 9799, 2893, 728, 891, 1560, 5006, 8043, 5106, 3597, 9990, 191, 3098, 5996, 6295, 7755, 4077, 6759, 2929, 2424, 6006, 8318, 565, 9482, 2015, 8580, 8314, 8422, 9978, 4655, 4768, 3722, 1119, 4712, 9834, 754, 1688, 6179, 9648, 5841, 2007, 574, 9245, 4881, 9429, 3683, 6205, 4985, 2147, 5614, 928, 6040, 2273, 8337, 2872, 6867, 104, 879, 7092, 4409, 7872, 4650, 9063, 236, 4685, 3156, 1208, 5550, 4944, 6325, 7783, 626, 285, 7074, 864, 1464, 4313, 8082, 6920, 8045, 4141, 9063, 1035, 8285, 9379, 5298, 6683, 7944, 1003, 3065, 3515, 5225, 4705, 8792, 8791, 7277, 9477, 3771, 1097, 8472, 9925, 1456, 2177, 4675, 8933, 7047, 3803, 4044, 9532, 1181, 7097, 773, 41, 5211, 9132, 1179, 470, 7000, 8710, 5184, 9928, 2711, 3412, 5705, 5179, 3091, 6340, 5273, 8896, 1253, 2014, 3535, 4067, 6499, 8594, 581, 8314, 78, 9107, 1821, 7032, 1267, 6406, 7933, 6472, 4437, 867, 3251, 9073, 2813, 4111, 7759, 158, 6482, 2444, 6931, 9917, 6325, 8541, 8535, 7060, 2782, 6913, 9085, 6724, 9380, 4257, 6210, 7325, 7213, 8028, 3958, 3319]


N = int(input('Задайте число: '))
print("Заданное Вами число: ", N)
print("Ниже выведены корни тех элементов из списка(200), которые меньше заданного числа.")

spisok = [9567, 9661, 6541, 4146, 534, 5627, 6900, 5803, 7794, 1174, 2365, 9759, 355, 2071, 5053, 1252, 4063, 3068, 9552, 9895, 5642, 3286, 5740, 9318, 1684, 8758, 9520, 9420, 9799, 2893, 728, 891, 1560, 5006, 8043, 5106, 3597, 9990, 191, 3098, 5996, 6295, 7755, 4077, 6759, 2929, 2424, 6006, 8318, 565, 9482, 2015, 8580, 8314, 8422, 9978, 4655, 4768, 3722, 1119, 4712, 9834, 754, 1688, 6179, 9648, 5841, 2007, 574, 9245, 4881, 9429, 3683, 6205, 4985, 2147, 5614, 928, 6040, 2273, 8337, 2872, 6867, 104, 879, 7092, 4409, 7872, 4650, 9063, 236, 4685, 3156, 1208, 5550, 4944, 6325, 7783, 626, 285, 7074, 864, 1464, 4313, 8082, 6920, 8045, 4141, 9063, 1035, 8285, 9379, 5298, 6683, 7944, 1003, 3065, 3515, 5225, 4705, 8792, 8791, 7277, 9477, 3771, 1097, 8472, 9925, 1456, 2177, 4675, 8933, 7047, 3803, 4044, 9532, 1181, 7097, 773, 41, 5211, 9132, 1179, 470, 7000, 8710, 5184, 9928, 2711, 3412, 5705, 5179, 3091, 6340, 5273, 8896, 1253, 2014, 3535, 4067, 6499, 8594, 581, 8314, 78, 9107, 1821, 7032, 1267, 6406, 7933, 6472, 4437, 867, 3251, 9073, 2813, 4111, 7759, 158, 6482, 2444, 6931, 9917, 6325, 8541, 8535, 7060, 2782, 6913, 9085, 6724, 9380, 4257, 6210, 7325, 7213, 8028, 3958, 3319]

for index in (range(len(spisok))):
    if (spisok[index]) ** (0.5) < N:
        print((spisok[index]) ** (0.5))

# Результат работы кода:

# Задайте число: 15
# Заданное Вами число:  15
# Ниже выведены корни тех элементов из списка(200), которые меньше заданного числа.
# 13.820274961085254
# 10.198039027185569
# 6.4031242374328485
# 8.831760866327848
# 12.569805089976535
# ================================================================================================






# ЗАДАНИЕ 3.   ============================================================================

# Дан список, состоящий из 50 элементов, определить сколько из них кратны 41
# и больше среднего арифметического наибольшего и наименьшего значений списка.
# Для поиска максимального и минимальных значений использовать сортировку и индексы


#
from random import randint
spis = list()
i = 0

while i < 50:
    spis.append(randint(1,100000))
    i += 1
print(spis)
# СОЗДАЛИ рандомный СПИСОК ИЗ 50 ЭЛЕМЕНТОВ (из диапазона чисел: 1-100.000 )

min_ = 50
max_ = 0

for i in range(len(spis)):
    if spis[i] <= min_:
        min_ = spis[i]
    if spis[i] >= max_:
        max_ = spis[i]
medium = (min_ + max_)/2

print('min_ = ', min_)
print('max_ = ', max_)
print("medium = ", medium)
#
# # НАШЛИ МИНИМАЛЬНЫЙ И МАКСИМАЛЬНЫЙ ЭЛЕМЕНТ СПИСКА среднее арифметическое


sum = 0
for i in range(len(spis)):
    if (spis[i] / 41) == round((spis[i] / 41), 0) and (spis[i] > medium):
        print(spis[i])
        sum += 1
# # ВЫПОЛНИЛИ  ОСНОВНОЕ  ЗАДАНИЕ  ЗАДАЧИ.

# # ВЫВОД РЕЗУЛЬТАТА НА ЭКРАН:
if sum == 0:
    print('Чисел, удовлетворяющих заданным условиям в данном списке не нашлось!')
    print('(Попробуйте перезапустить программу...)')
else:
    print("Чисел,кратных 41 и больше ср.арифметич. "
      "наибольшего и наименьшего значений списка нашлось:", sum)


# Результат работы кода (ОДИН ИЗ ВАРИАНТОВ):

# min_ =  50
# max_ =  99924
# medium =  49987.0
# 83722
# 56662
# Чисел,кратных 41 и больше ср.арифметич. наибольшего и наименьшего значений списка нашлось: 2

# ==================================================================================================






# ЗАДАНИЕ 4.   ============================================================================

# На вход подаётся строка, некоторые слова в которой "испорчены".
# Признак "испорченного" слова - 1я буква в нём заменена на *.
# Выведете на печать список "не испорченных" слов.


S = 'Однажды в *студеную *зимнюю пору я *из *лесу вышел *был *сильный *мороз'

rzd_spisok = (S.split(' '))   # разделенный на слова список

k = 0
while k < len(rzd_spisok):
    slovo = (rzd_spisok[k])
    if (slovo[0]) != '*':
        print(rzd_spisok[k])
    k += 1

# Результат работы кода:
# Однажды
# в
# пору
# я
# вышел

# ==================================================================================================






# ЗАДАНИЕ 5.   ============================================================================

# Реализуйте в отдельной функции алгоритм Евклида
# (алгоритм нахождения наибольшего общего делителя (НОД) пары целых чисел), возвращая НОД.
# Проверить полученную функцию на списке, состоящем из 10 пар чисел
# (пример пар: [[5, 7], [21, 111], [63, 49]]).


def evklid(E):
    print('СПИСОК 10 ПАР: ', E)
    for index in range(len(E)):
        para = E[index]
        min_pr = min(E[index])
        arg1 = (para[0])
        arg2 = (para[1])

        while min_pr != 0:
            if  ((arg1/min_pr) == (round(arg1/min_pr, 0))) and (arg2/min_pr ==  (round(arg2/min_pr,0 ))):
                nod = min_pr
                print('для пары чисел ',arg1,'и',arg2, '  НОД равен:', nod)
                break
            else:
                min_pr -= 1


E = [[5, 7], [21, 111], [63, 49], [25, 270], [121, 11], [3638, 34], [210, 44], [1000, 450], [2150, 2270], [3681, 234]]
evklid(E)


# Результат работы кода:

# СПИСОК 10 ПАР:  [[5, 7], [21, 111], [63, 49], [25, 270], [121, 11], [3638, 34], [210, 44], [1000, 450], [2150, 2270], [3681, 234]]
# для пары чисел  5 и 7   НОД равен: 1
# для пары чисел  21 и 111   НОД равен: 3
# для пары чисел  63 и 49   НОД равен: 7
# для пары чисел  25 и 270   НОД равен: 5
# для пары чисел  121 и 11   НОД равен: 11
# для пары чисел  3638 и 34   НОД равен: 34
# для пары чисел  210 и 44   НОД равен: 2
# для пары чисел  1000 и 450   НОД равен: 50
# для пары чисел  2150 и 2270   НОД равен: 10
# для пары чисел  3681 и 234   НОД равен: 9
# ==================================================================================================





# ЗАДАНИЕ 6.   =====================================================================================

# Напишите функцию convert(L), принимающую на вход список,
# состоящий из чисел и строк вида:
# [1, 2, '3', '4', '5', 6],
# и возвращающую список целых чисел (в том же порядке):
# [1, 2, 3, 4, 5, 6]


L = [1, 2, '3', '4', '5', 6, '7']
def convert(L):
    L_last = []
    k = 0
    while k < len(L):
        if (type(L[k])) == type(int()):
            L_last.append(L[k])
        else:
            L_last.append(int(L[k]))
        k += 1
    return (L_last)

test = convert(L)
print(test)

# Результат работы кода:
# [1, 2, 3, 4, 5, 6, 7]
# ==================================================================================================


# Вариант 6.2...!!!
# тот же алгоритм решения задачи, но с использованием функции range() вместо счетчика цикла:

L = [1, 2, '3', '4', '5', 6, '7']
def convert(L):
    L_last = []
    k = 0
    for k in range(len(L)):
        if (type(L[k])) == type(int()):
            L_last.append(L[k])
        else:
            L_last.append(int(L[k]))

      # L_last.append(str(L[k])) <--- А вообще, тут достаточно только ЭТОЙ команды.
      # можно обойтись и совсем без условий if/else (удалить 4 строки выше).    Работать правильно будет и без них!
      # Просто я сделал по "классике".

    return (L_last)

test = convert(L)
print(test)




#                  END OF     'ДОПОЛНИТЕЛЬНЫЕ ЗАДАНИЯ К МОДУЛЮ 2'
# ==================================================================================================